from typing import Dict
from ytmusicapi import YTMusic
from duckduckgo_search import DDGS
from collections import namedtuple
from urllib.parse import urlencode, urlunparse

# from song import Song

class Metadata():
    ytmusic = YTMusic()
    
    def __init__(self, title, artist):

        print("Getting metadata from YouTube Music...")
        data = Metadata.get_metadata(title, artist)
        print("Getting URLS for YouTube Music...")
        ytm_url = Metadata.get_YouTubeMusic(data['song_id'], data['album'], artist)
        print("Getting URLS for Spotify...")
        sptfy_url = Metadata.get_Spotify(title, data['album'], artist)

        self.title = title
        self.artist = artist

        self.album = data['album']
        self.duration = data['duration']
        self.year = data['year']
        self.viewCount = data['viewCount']
        self.cover = data['cover']

        self.song_url_YTM = ytm_url['song']
        self.album_url_YTM = ytm_url['album']

        self.song_url_sptfy = sptfy_url['song']
        self.album_url_sptfy = sptfy_url['album']

        print("Finised getting metadata.")
    
    def print_infos(self) -> None:
        attrs = vars(self)
        return '\n'.join("%s: %s" % item for item in attrs.items())
        
    @classmethod
    def get_metadata(cls, title : str, artist : str = None) -> Dict[str, str]:
        '''
        Findes a song using a unofficial API for YouTube Music and returns relevant meta data for the song

        For more infos about the API see https://ytmusicapi.readthedocs.io/en/stable/index.html 
        '''

        query = f"{title} {artist}" if artist else title

        print("Searching Song on YouTube Music...")
        results = cls.ytmusic.search(
            query,
            filter="songs",
            scope=None,
            limit=20
        )

        print("Filter search results...")
        song = next((r for r in results if title.lower() in r['title'].lower()), None)
        print("Getting Album infos from YouTube Music...")
        album = cls.ytmusic.get_album(song['album']['id'])
        print("Getting Song infos from YouTube Music...")
        songinfo = cls.ytmusic.get_song(song['videoId'])['videoDetails']

        return {
            'album': song['album']['name'],
            'song_id': song['videoId'],
            'duration': song['duration'],
            'year': album['year'],
            'viewCount' : songinfo['viewCount'],
            'cover': songinfo['thumbnail']['thumbnails'][-1]['url']
            }
    
    @staticmethod
    def get_YouTubeMusic(song_id : str, album : str, artist : str = None) -> Dict[str, str]:
        '''
        Returns the URL for the Song and its Album on Youtube Music.

        The song URL is generated by using the song_id an and the urllib.parse library.
        The album URL is recived by searching online with the DuckDuckGo API for the album.
        '''

        # namedtuple to match the internal signature of urlunparse
        Components = namedtuple(
            typename='Components', 
            field_names=['scheme', 'netloc', 'path', 'params', 'query', 'fragment']
        )

        print("Generating YouTube Music song URL...")
        song_url =  urlunparse(
            Components(
                scheme='https',
                netloc='music.youtube.com',
                path='/watch',
                params='',
                query=urlencode({'v': song_id}),
                fragment=''
            )
        )
        
        print("Getting YouTube Music Album URL...")
        album_url = Metadata.get_url(
            keywords=f"{album} {artist} YouTubeMusic" if artist else f"{album} YouTubeMusic",
            url_start="https://music.youtube.com/playlist"
        )

        return {
            'song':  song_url,
            'album':  album_url
        }

    @staticmethod
    def get_Spotify(title : str, album : str, artist : str = None) -> Dict[str, str]:
        '''
        Returns the URL for the Song and its Album on Spotify.

        The song and the album URLs are recived by searching online with the DuckDuckGo API for the song and the album.
        '''

        print("Getting Spotify Song URL...")
        song_url = Metadata.get_url(
            keywords=f"{title} {artist} Spotify" if artist else f"{title} Spotify",
            url_start="https://open.spotify.com/track/"
        )
        
        print("Getting Spotify Album URL...")
        album_url = Metadata.get_url(
            keywords=f"{album} {artist} Spotify" if artist else f"{album} Spotify",
            url_start="https://open.spotify.com/album/"
        )

        return {
            'song':  song_url,
            'album':  album_url
        }

    @staticmethod
    def get_url(keywords : str, url_start : str = None) -> str:
        '''
        Searches online with the DuckDuckGo Search API for the providet keywords and returns the first URL which starts with the url_start strin
        '''
        
        print("Searching for URLs...")
        results = DDGS().text(
            keywords,
            region=None,
            safesearch='off',
            timelimit=None,
            backend="api",
            max_results=10)
        
        print("Filtering for URLs...")
        url = next((r['href'] for r in results if r['href'].startswith(url_start)), None) if url_start else results[0]['href']

        return url

    def __str__(self):
        return f"{self.title} by {self.artist}"
    
    def __repr__(self):
        return self.__str__()


if __name__ == "__main__":
    
    title = "Darkness at the Heart of My Love"
    artist = "Ghost"

    song = Metadata(title, artist)
    song.print_infos()