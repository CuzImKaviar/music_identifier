from typing import Dict
from ytmusicapi import YTMusic
from duckduckgo_search import DDGS
from collections import namedtuple
from urllib.parse import urlencode, urlunparse

# from song import Song

class Metadata():
    ytmusic = YTMusic()
    
    def __init__(self, title, artist):
        self.title = title
        self.artist = artist

        data = Metadata.get_metadata(self.title, self.artist)

        self.album = data['album']
        self.duration = data['duration']
        self.year = data['year']
        self.viewCount = data['viewCount']
        self.cover = data['cover']

        self.album_id = data['album_id']
        self.song_id = data['song_id']
    
    def print_infos(self) -> None:
        attrs = vars(self)
        print('\n'.join("%s: %s" % item for item in attrs.items()))
        
    @classmethod
    def get_metadata(cls, title : str, artist : str = None) -> Dict[str, str]:
        '''
        Findes a song using a unofficial API for YouTube Music and returns relevant meta data for the song

        For more infos about the API see https://ytmusicapi.readthedocs.io/en/stable/index.html 
        '''

        query = f"{title} {artist}" if artist else title

        results = cls.ytmusic.search(
            query,
            filter="songs",
            scope=None,
            limit=20
        )

        song = next((r for r in results if title.lower() in r['title'].lower()), None)
        album = cls.ytmusic.get_album(song['album']['id'])
        songinfo = cls.ytmusic.get_song(song['videoId'])['videoDetails']

        return {
            'album': song['album']['name'],
            'album_id': song['album']['id'],
            'song_id': song['videoId'],
            'duration': song['duration'],
            'year': album['year'],
            'viewCount' : songinfo['viewCount'],
            'cover': songinfo['thumbnail']['thumbnails'][-1]['url']
            }
    
    @staticmethod
    def get_YouTubeMusic(song_id : str, album : str, artist : str = None) -> Dict[str, str]:
        '''
        Returns the URL for the Song and its Album on Youtube Music.

        The song URL is generated by using the song_id an and the urllib.parse library.
        The album URL is recived by searching online with the DuckDuckGo API for the album.
        '''

        # namedtuple to match the internal signature of urlunparse
        Components = namedtuple(
            typename='Components', 
            field_names=['scheme', 'netloc', 'path', 'params', 'query', 'fragment']
        )

        song_url =  urlunparse(
            Components(
                scheme='https',
                netloc='music.youtube.com',
                path='/watch',
                params='',
                query=urlencode({'v': song_id}),
                fragment=''
            )
        )

        album_url = Metadata.get_url(
            keywords=f"{album} {artist} YouTubeMusic" if artist else album,
            url_start="https://music.youtube.com/playlist"
        )

        return {
            'song':  song_url,
            'album':  album_url
        }

    # @staticmethod
    # def get_YTM_Song(song_id : str) -> str:
    #     '''
    #     Returns the URL for the Song on Youtube Music by adding the song_id as a Youtube Music URL as an 
    #     '''

    #     # namedtuple to match the internal signature of urlunparse
    #     Components = namedtuple(
    #         typename='Components', 
    #         field_names=['scheme', 'netloc', 'path', 'params', 'query', 'fragment']
    #     )

    #     song_url =  urlunparse(
    #         Components(
    #             scheme='https',
    #             netloc='music.youtube.com',
    #             path='/watch',
    #             params='',
    #             query=urlencode({'v': song_id}),
    #             fragment=''
    #         )
    #     )

    #     return song_url

    # @staticmethod
    # def get_YTM_Album(album : str, artist : str = None) -> str:

    #     keywords = f"{album} {artist} YouTubeMusic" if artist else title
    
    #     results = DDGS().text(
    #         keywords,
    #         region=None,
    #         safesearch='off',
    #         timelimit=None,
    #         backend="api",
    #         max_results=10)
        
    #     url = next((r['href'] for r in results if r['href'].startswith("https://music.youtube.com/playlist")), None)

    #     return url

    @staticmethod
    def get_Spotify(title : str, album : str, artist : str = None) -> Dict[str, str]:
        return

    @staticmethod
    def get_url(keywords : str, url_start : str = None) -> str:
        '''
        Searches online with the DuckDuckGo Search API for the providet keywords and returns the first URL which starts with the url_start strin
        '''
        
        results = DDGS().text(
            keywords,
            region=None,
            safesearch='off',
            timelimit=None,
            backend="api",
            max_results=10)
        
        url = next((r['href'] for r in results if r['href'].startswith(url_start)), None) if url_start else results[0]['href']

        return url

    def __str__(self):
        return f"{self.title} by {self.artist}"
    
    def __repr__(self):
        return self.__str__()
    
if __name__ == "__main__":
    
    title = "Ghost Division"
    artist = "Sabaton"
    album = "The Art of War (Re-Armed)"

    # song = Metadata(title, artist)
    # song.print_infos()

    # print('\n')
    # print(f"URL: {Metadata.get_YouTubeMusic(song.song_id, song.album)}")

    keywords = f"{album} {artist} Spotify" if artist else title
    
    results = DDGS().text(
        keywords,
        region=None,
        safesearch='off',
        timelimit=None,
        backend="api",
        max_results=10)

    for result in results:
        print('\n')
        for x in result:
            print (x,':',result[x])
    